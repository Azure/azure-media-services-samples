<?xml version="1.0" encoding="utf-8"?>
<topic id="9b8da6b9-e710-4211-94aa-7eb5888f57f3" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
<para>One of the greatest benefits of logging is to be able to
report back to a remote server. Fortunately, the Silverlight Media Framework
makes it very easy to support this.</para>
    </introduction>


<section>
  <title>Logging</title>
  <content>

<para>In the Microsoft.SilverlightMediaFramework.Logging assembly
are a number of helper and base classes that make it easy to build an
efficient, custom logging client. Take a look at the RemoteDiagnostics sample
application for an example of this.</para>

<para>Here's a rundown on the key pieces of that sample.</para>

  </content>
</section>

<section>
  <title>Step 1: Getting started with remote logging</title>
  <content>

<para>First, you will need to add the following references to your
project: </para>


<list class="bullet">
  <listItem>Microsoft.SilverlightMediaFramework.Diagnostics</listItem>
  <listItem>Microsoft.SilverlightMediaFramework.Monitoring</listItem>
  <listItem>Microsoft.SilverlightMediaFramework.Logging</listItem>
  <listItem>System.ComponentModel.Composition</listItem>
</list>

<para>Next, you will need to create a custom log agent that
inherits from Microsoft.SilverlightMediaFramework.Monitoring.RemoteVideoLogAgent.
A log agent is responsible for receiving all the log objects generated by the
Silverlight Media Framework's Logging component and the RemoteVideoLogAgent base
class will give you automatic support for queuing and batching these logs
before sending them to the server. You will also need to export this class in
order for the Silverlight Media Framework to find it via MEF.</para>

<code language="none" title=" ">[Export(typeof(ILogAgent))]<para/>
public&#160;class&#160;RemoteLogAgent&#160;:&#160;RemoteVideoLogAgent<para/>
{<para/>
}</code>

  </content>
</section>

<section><!--h3-->
  <title>Step 2: Configuration</title>
  <content>

<para>In order for the base class to know how to batch and queue,
it needs some configuration settings. These settings are defined in the BatchingConfig
object and must be passed to the constructor of the base class. To support
this, we will load the configuration from an xml file using a helper method on
BatchingConfig and overload the constructor to pass it to RemoteVideoLogAgent.</para>

<code language="none" title=" ">[Export(typeof(ILogAgent))]<para/>
public&#160;class&#160;RemoteLogAgent&#160;:&#160;RemoteVideoLogAgent<para/>
{<para/>
&#160;&#160;&#160;&#160;public&#160;RemoteLogAgent()&#160;:&#160;base(GetConfig())&#160;{&#160;}<para/>
 <para/>
&#160;&#160;&#160;&#160;static&#160;BatchingConfig&#160;GetConfig()<para/>
&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BatchingConfig.Load(new&#160;Uri(&quot;MyConfig.xml&quot;,&#160;UriKind.Relative));<para/>
&#160;&#160;&#160;&#160;}<para/>
}</code>

<para> (See below for more information about the BatchingConfig
Xml.)</para>

  </content>
</section>

<section>
  <title>Step 3: Handling the batches of logs</title>
  <content>

<para>Last but not least we need to actually handle the batches of
logs and send them to our server. To do this we need to create a class that
implements IBatchAgent and pass an instance of it to the config object.</para>

<code language="none" title=" ">[Export(typeof(ILogAgent))]<para/>
public&#160;class&#160;RemoteLogAgent&#160;:&#160;RemoteVideoLogAgent<para/>
{<para/>
&#160;&#160;&#160;&#160;public&#160;RemoteLogAgent()&#160;:&#160;base(GetConfig())&#160;{&#160;}<para/>
 <para/>
&#160;&#160;&#160;&#160;static&#160;BatchingConfig&#160;GetConfig()<para/>
&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;var&#160;result&#160;=&#160;BatchingConfig.Load(new&#160;Uri(&quot;MyConfig.xml&quot;,&#160;UriKind.Relative));<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result.BatchAgent&#160;=&#160;new&#160;MyBatchAgent();<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;result;<para/>
&#160;&#160;&#160;&#160;}<para/>
}</code>

<para>IBatchAgent is very simple and only has one method:
LogBatchAsync and one event: LogBatchCompleted. Here is an example
implementation of this interface that serializes the batch to Xml and passes it
up to the server as a string.</para>

<code language="none" title=" ">public&#160;class&#160;MyBatchAgent&#160;:&#160;IBatchAgent<para/>
{<para/>
&#160;&#160;&#160;&#160;Service1Client&#160;svc; <para/>
&#160;&#160;&#160;&#160;public&#160;event&#160;EventHandler&lt;LogBatchCompletedEventArgs&gt;&#160;LogBatchCompleted;<para/>
 <para/>
&#160;&#160;&#160;&#160;public&#160;MyBatchAgent()<para/>
&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;svc&#160;=&#160;new&#160;Service1Client();<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;svc.SendBatchCompleted&#160;+=&#160;svc_SendBatchCompleted;<para/>
&#160;&#160;&#160;&#160;}<para/>
 <para/>
&#160;&#160;&#160;&#160;public&#160;bool&#160;LogBatchAsync(Batch&#160;batch)<para/>
&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;using&#160;(Stream&#160;stream&#160;=&#160;new&#160;MemoryStream())<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;batch.Serialize(XmlWriter.Create(stream));<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stream.Position&#160;=&#160;0;<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;svc.SendBatchAsync(new&#160;StreamReader(stream).ReadToEnd(),&#160;batch);<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;true;<para/>
&#160;&#160;&#160;&#160;}<para/>
 <para/>
&#160;&#160;&#160;&#160;void&#160;svc_SendBatchCompleted(object&#160;sender,&#160;SendBatchCompletedEventArgs&#160;e)<para/>
&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(LogBatchCompleted&#160;!=&#160;null)<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Batch&#160;batch&#160;=&#160;e.UserState&#160;as&#160;Batch;<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(e.Error&#160;==&#160;null)<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;success!<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogBatchCompleted(this,<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;new&#160;LogBatchCompletedEventArgs(null&#160;as&#160;LogBatchResult,&#160;batch));<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;error<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogBatchCompleted(this,<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;new&#160;LogBatchCompletedEventArgs(e.Error,&#160;batch));<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<para/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<para/>
&#160;&#160;&#160;&#160;}<para/>
}</code>

  </content>
</section>

<section><!--h3-->
  <title>Step 4: LogBatchResult (optional)</title>
  <content>

<para>One thing you may notice above is that we are raising the LogBatchCompleted event and passing null:</para>

<code language="none" title=" ">
	<para>LogBatchCompleted(this, new&#160;LogBatchCompletedEventArgs(null&#160;as&#160;LogBatchResult,&#160;batch));</para>
</code>

<para>The LogBatchResult object that is passed back in the
LogBatchCompleted event has properties to alter the behavior of the
LogBatchAgent. With it you can change the polling interval, disable logging
entirely, or calibrate the local time stamp attached to each log by offsetting
it with the difference between itself and the server's time (thereby making log
timestamps closely synced with the server time). Please refer to the
LogBatchResult API for more information. Passing null indicates that everything should keep running as usual.</para>

  </content>
</section>

<section>
  <title>Further possible performance improvements</title>
  <content>


<list class="bullet">
  <listItem>Zip the serialized stream to use the least amount of bandwidth
as possible.</listItem>
  <listItem>Create mapping configuration settings to shrink the dictionary
keys and drop unwanted data from your logs. Please refer to the API reference
for Microsoft.SilverlightMediaFramework.Logging.Mapping.MappingRules for more
information.</listItem>
</list>


  </content>
</section>

    <relatedTopics>
    </relatedTopics>

  </developerConceptualDocument>
</topic>
