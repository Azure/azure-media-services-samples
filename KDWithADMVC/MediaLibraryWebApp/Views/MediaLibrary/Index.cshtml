@using System.Security.Claims
@model IEnumerable<Tuple<Microsoft.WindowsAzure.MediaServices.Client.IAsset, Microsoft.WindowsAzure.MediaServices.Client.ILocator, Uri>>
@{
    ViewBag.Title = "Azure Media Services Assets";
}
<h3>Streamable Media Library</h3>


@if ((bool)ViewData["IsAdmin"] == true)
{
    using (Html.BeginForm("CleanAllPermissions", "MediaLibrary"))
    {
        @Html.ActionLink("Clear All Content Keys, Auth and Delivery Policies", "CleanAllPermissions", "MediaLibrary", null, new { @class = "saveButton", onclick = "return false;" })
    }
    <script>
        $(document).ready(function () {
            $('.saveButton').click(function () {
                $(this).closest('form')[0].submit();
            });
        });
    </script>

}
<p>
    <table class="table table-bordered table-striped">
        <tr>
            <th>Asset Id</th>
            <th>Asset Name</th>
            <th>Expires</th>
            <th></th>
        </tr>

        @foreach (var i in Model)
        {

            <tr>
                <td> @i.Item1.Id</td>
                <td> @i.Item1.Name</td>
                @if (i.Item2 != null)
                {
                    <td> @(i.Item2.ExpirationDateTime)</td>
                    <td>
                        <div>
                            <object width="600" height="420">
                                <param name="movie" value="@(Url.Content("~/Content/StrobeMediaPlayback.2.0.swf"))"></param>
                                <param name="flashvars" value="src=@(i.Item3)/Manifest&autoPlay=false&plugin_AdaptiveStreamingPlugin=/Content/MSAdaptiveStreamingPlugin-v1.0.12-osmf2.0.swf&AdaptiveStreamingPlugin_retryLive=true&AdaptiveStreamingPlugin_retryInterval=10&AdaptiveStreamingPlugin_encryptionKeyToken=Bearer @(ClaimsPrincipal.Current.FindFirst("ADJwtTokenClaim").Value)"></param>
                                <param name="allowFullScreen" value="true"></param>
                                <param name="allowscriptaccess" value="always"></param>
                                <param name="wmode" value="direct"></param>
                                <embed src="@(Url.Content("~/Content/StrobeMediaPlayback.2.0.swf"))"
                                       type="application/x-shockwave-flash"
                                       allowscriptaccess="always"
                                       allowfullscreen="true"
                                       wmode="direct"
                                       width="600"
                                       height="420"
                                       flashvars="src=@(i.Item3)/Manifest&autoPlay=false&plugin_AdaptiveStreamingPlugin=/Content/MSAdaptiveStreamingPlugin-v1.0.12-osmf2.0.swf&AdaptiveStreamingPlugin_retryLive=true&AdaptiveStreamingPlugin_retryInterval=10&AdaptiveStreamingPlugin_encryptionKeyToken=Bearer @(ClaimsPrincipal.Current.FindFirst("ADJwtTokenClaim").Value)"></embed>
                            </object>
                        </div>
                        @if ((bool)ViewData["IsAdmin"] == true)
                        {
                            using (Html.BeginForm("RemoveJWTTokenAuthentication", "MediaLibrary"))
                            {
                                @(Html.Hidden("assetId", i.Item1.Id))
                                @(Html.ActionLink("Remove JWT Token Auth policy", "RemoveJWTTokenAuthentication", "MediaLibrary", i.Item1.Id, new { @class = "saveButton", onclick = "return false;" }))

                            }
                        }
                    </td>
                }
                else
                {
                    <td></td>
                    if ((bool)ViewData["IsAdmin"] == true)
                    {
                        <td>
                            <b>Requeired claims:</b>
                            @using (Html.BeginForm("EnableJWTTokenAuthentication", "MediaLibrary"))
                            {
                                @Html.Encode(" Claim : ")
                                @(Html.Hidden("assetId", i.Item1.Id))
                                @(Html.TextBox("claimType", ""))
                                @Html.Encode(" = ")
                                @(Html.TextBox("claimValue", ""))<br />
                                @(Html.ActionLink("Set JWT Token Auth policy", "EnableJWTTokenAuthentication", "MediaLibrary", i.Item1.Id, new { @class = "saveButton", onclick = "return false;" }))

                            }
                        </td>
                    }
                }
            </tr>
        }
    </table>
</p>
@if (ViewBag.ErrorMessage == "AuthorizationRequired")
{
    <p>You have to sign-in to see your to do list. Click @Html.ActionLink("here", "Index", "MediaLibrary", new { reauth = true }, null) to sign-in.</p>

}
@if (ViewBag.ErrorMessage == "UnexpectedError")
{
    <p>An unexpected error occurred while retrieving your to do list.  Please try again.  You may need to sign-in.</p>
}
